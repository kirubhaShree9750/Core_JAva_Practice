Java
object-oriented, class-based, concurrent, secured and general-purpose computer-programming language

Java Platforms / Editions

1. Java SE (Java Standard Edition)
2. Java EE (Java Enterprise Edition)
3. Java ME (Java Micro Edition)
4. JavaFX

Features of Java
Simple
Java is very easy to learn, and its syntax is simple, clean and easy to understand

Object-oriented
Java is an object-oriented programming language. Everything in Java is an object.
Object-oriented means we organize our software as a combination of different types of objects that incorporate both data and behavior.

Platform Independent
Byte code can be exceuted in any platform

Secured
Java is best known for its security. With Java, we can develop virus-free systems. Java is secured because:
 3.1 No explicit pointer
 3.2 Java Programs run inside a virtual machine sandbox
Robust

It uses strong memory management.
There is a lack of pointers that avoids security problems.
Java provides automatic garbage collection which runs on the Java Virtual Machine to get rid of objects which are not being used by a Java application anymore.
There are exception handling and the type checking mechanism in Java. All these points make Java robust.

Portable
Java is portable because it facilitates you to carry the Java bytecode to any platform. It doesn't require any implementation.

High-performance
Java is faster than other traditional interpreted programming languages because Java bytecode is "close" to native code.

Distributed
Java is distributed because it facilitates users to create distributed applications in Java.

Multi-threaded
A thread is like a separate program, executing concurrently.
We can write Java programs that deal with many tasks at once by defining multiple threads.
The main advantage of multi-threading is that it doesn't occupy memory for each thread.

Dynamic
Java is a dynamic language. It supports the dynamic loading of classes
Java supports dynamic compilation and automatic memory management (garbage collection).


Compile Time:
Java Code -> byte code

What happens in runtime?
ClassFile ->Class Loader -> Bytecode verifier -> Interpreter -> Runtime -> Hardware

Classloader: It is the subsystem of JVM that is used to load class files.
Bytecode Verifier: Checks the code fragments for illegal code that can violate access rights to objects.
Interpreter: Read bytecode stream then execute the instruction


Valid Java main() method signature:

public static void main(String[] args)  
public static void main(String []args)  
public static void main(String args[])  
public static void main(String... args)  
static public void main(String[] args)  
public static final void main(String[] args)  
final public static void main(String[] args)  
final strictfp public static void main(String[] args)  

Invalid JAva main():

public void main(String[] args)  
static void main(String[] args)  
public void static main(String[] args)  
abstract public static void main(String[] args)


 Can you save a Java source file by another name than the class name?
Yes, if the class is not public. To compile:
javac Hard.java
To execute:
java Simple
Observe that, we have compiled the code with file name but running the program with class name. Therefore, we can save a Java program other than class name

JAvac is not regonized as internal or external command?

If there occurs a problem like displayed in the below figure, you need to set a path. Since DOS doesn't recognize javac and java as internal or external command. To overcome this problem, we need to set a path. The path is not required in a case where you save your program inside the JDK/bin directory. However, it is an excellent approach to set the path

What happens at compile time?
At compile time, the Java file is compiled by Java Compiler (It does not interact with OS) and converts the Java code into bytecode.

Can you have multiple classes in a java source file?
Class A{}  converted to  A.class
Class B{}                B.class
Class C{}                C.class
D.java

JVM
JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed.It can also run those programs which are written in other languages and compiled to Java bytecode.
Loads code
Verifies code
Executes code
Provides runtime environment

JRE
JRE is an acronym for Java Runtime Environment. It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.

JDK
JDK is an acronym for Java Development Kit. The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools.

Memory:

Class(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods
(No permgen memory after java 8)

Heap
It is the runtime data area in which objects are allocated. It stores interface objects. There is also one Heap Area per JVM. It is also a shared resource.

Stack:

Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return

PC Registers: Store address of current execution instruction of a thread. Obviously, each thread has separate PC Registers.

Native method stacks: For every thread, a separate native stack is created. It stores native method information.

JIT (inside JVM);
JIT provides direct machine code so re-interpretation is not required,
Makes execution faster

Stack                Heap
Stores refernces     stores objects
Temperorary mermory  perm memory
Fixed Size           Dynamically adjust size
Faster access        Slower access

Types of Variables
There are three types of variables in Java:
1.local variable
2.instance variable
3.static variable

 1) Local Variable
A variable declared inside the body of the method is called local variable.
You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists.
A local variable cannot be defined with "static" keyword.

2) Instance Variable
A variable declared inside the class but outside the body of the method, is called an instance variable.
It is not declared as static.
It is called an instance variable because its value is instance-specific and is not shared among instances.

3) Static variable
A variable that is declared as static is called a static variable. It cannot be local.
You can create a single copy of the static variable and share it among all the instances of the class. Memory allocation for static variables happens only once when the class is loaded in the memory.


public class A  
{  
    static int m=100;//static variable  
    void method()  
    {    
        int n=90;//local variable    
    }  
    public static void main(String args[])  
    {  
        int data=50;//instance variable    
    }  
}//end of class   



Pagination. catching. zip verisionation

cart -> api -> checkout async 
payment api -> 3rd party ->sync ->aysnc
cancel -> payment failure
docker
ec2 -> 
