Java
object-oriented, class-based, concurrent, secured and general-purpose computer-programming language

Java Platforms / Editions

1. Java SE (Java Standard Edition)
2. Java EE (Java Enterprise Edition)
3. Java ME (Java Micro Edition)
4. JavaFX

Features of Java
Simple
Java is very easy to learn, and its syntax is simple, clean and easy to understand

Object-oriented
Java is an object-oriented programming language. Everything in Java is an object.
Object-oriented means we organize our software as a combination of different types of objects that incorporate both data and behavior.

Platform Independent
Byte code can be exceuted in any platform

Secured
Java is best known for its security. With Java, we can develop virus-free systems. Java is secured because:
 3.1 No explicit pointer
 3.2 Java Programs run inside a virtual machine sandbox
Robust

It uses strong memory management.
There is a lack of pointers that avoids security problems.
Java provides automatic garbage collection which runs on the Java Virtual Machine to get rid of objects which are not being used by a Java application anymore.
There are exception handling and the type checking mechanism in Java. All these points make Java robust.

Portable
Java is portable because it facilitates you to carry the Java bytecode to any platform. It doesn't require any implementation.

High-performance
Java is faster than other traditional interpreted programming languages because Java bytecode is "close" to native code.

Distributed
Java is distributed because it facilitates users to create distributed applications in Java.

Multi-threaded
A thread is like a separate program, executing concurrently.
We can write Java programs that deal with many tasks at once by defining multiple threads.
The main advantage of multi-threading is that it doesn't occupy memory for each thread.

Dynamic
Java is a dynamic language. It supports the dynamic loading of classes
Java supports dynamic compilation and automatic memory management (garbage collection).


Compile Time:
Java Code -> byte code

What happens in runtime?
ClassFile ->Class Loader -> Bytecode verifier -> Interpreter -> Runtime -> Hardware

Classloader: It is the subsystem of JVM that is used to load class files.
Bytecode Verifier: Checks the code fragments for illegal code that can violate access rights to objects.
Interpreter: Read bytecode stream then execute the instruction


Valid Java main() method signature:

public static void main(String[] args)  
public static void main(String []args)  
public static void main(String args[])  
public static void main(String... args)  
static public void main(String[] args)  
public static final void main(String[] args)  
final public static void main(String[] args)  
final strictfp public static void main(String[] args)  

Invalid JAva main():

public void main(String[] args)  
static void main(String[] args)  
public void static main(String[] args)  
abstract public static void main(String[] args)


 Can you save a Java source file by another name than the class name?
Yes, if the class is not public. To compile:
javac Hard.java
To execute:
java Simple
Observe that, we have compiled the code with file name but running the program with class name. Therefore, we can save a Java program other than class name

JAvac is not regonized as internal or external command?

If there occurs a problem like displayed in the below figure, you need to set a path. Since DOS doesn't recognize javac and java as internal or external command. To overcome this problem, we need to set a path. The path is not required in a case where you save your program inside the JDK/bin directory. However, it is an excellent approach to set the path

What happens at compile time?
At compile time, the Java file is compiled by Java Compiler (It does not interact with OS) and converts the Java code into bytecode.

Can you have multiple classes in a java source file?
Class A{}  converted to  A.class
Class B{}                B.class
Class C{}                C.class
D.java

JVM
JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed.
Pagination. catching. zip verisionation

cart -> api -> checkout async 
payment api -> 3rd party ->sync ->aysnc
cancel -> payment failure
docker
ec2 -> 
